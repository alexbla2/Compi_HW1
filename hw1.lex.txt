%{
#include <stdio.h>
#include <string.h>
void showToken(char* );
%}

%option yylineno
%option noyywrap
digit ([0-9])
letter ([a-zA-Z])
alphaNum ([0-9a-zA-Z])
whitespace ([\t\n ])
newline 	("\r\n" | "\r" | "\n")
hexdig 		([0-9a-f])
octdig 		([0-7])
STARTSTRUCT "---"
ENDSTRUCT "..."
LLIST "["
RLIST "]"
LDICT "{"
RDICT "}"
KEY ":"
COMPLEXKEY "?"
ITEM "-"
COMMA ","

%%


STARTSTRUCT 	showToken("STARTSTRUCT");
ENDSTRUCT 	showToken("ENDSTRUCT");
LLIST 	showToken("LLIST");
RLIST	showToken("RLIST");
LDICT 	showToken("LDICT");
RDICT	showToken("RDICT");
KEY 	showToken("KEY");
COMPLEXKEY	showToken("COMPLEXKEY");
ITEM	showToken("ITEM");
COMMA	showToken("COMMA");
"!!"{letter}+			showToken("TYPE");
"#".(newline$)	showToken("COMMENT");
true			showToken("TRUE");
false			showToken("FALSE");
("+"|"-")?{digit}+|0x{hexdig}+|0o{octdig}+	showToken("INTEGER");
(("+"|"-")?{digit}*.{digit}*)|(("+"|"-")?{digit}*.{digit}*e("+"|"-"){digit}+)|".inf"|".NaN" 	showToken("REAL");
{letter}+{alphaNum}+ 	showToken("VAL");
"&"{letter}+	showToken("DECLERATION");
"*"{letter}+	showToken("DEREFERENCE");
{whitespace}	;

%%

/*
int oct2int(char* oct, int len){
	int temp, num = 0, factor = 1;
	for(int i=len-1 ; i>1 ; i--){
		temp = oct[i] - 48;
		temp *= factor;
		num += temp;
		factor *= 8;
	}
	return num;
}

int hex2int(char* oct, int len){

	int temp, num = 0, factor = 1;
	for(int i=len-1 ; i>1 ; i--){
	//check if dig or letter
		if(( 'a' <= oct[i] ) && ( oct[i] <= 'f' ))
			temp = oct[i] - 87;
		else
			temp = oct[i] - 48;
		temp *= factor;
		num += temp;
		factor *= 16;
	}
	return num;
}
*/
void showToken(char* str){
	if( strcmp(str ,"COMMENT") == 0 ){
		//cut the newline from comment
	}	
		
	printf("%d %s %s\n", yylineno, str, yytext);
}	

