%{
#include <stdio.h>
#include <string.h>
void showToken(char* );
int oct2int(char* oct, int len);
int hex2int(char* oct, int len);
%}

%option yylineno
%option noyywrap

digit ([0-9])
letter ([a-zA-Z])
alphaNum ([0-9a-zA-Z])
whitespace ([\t\n ])
newline 	(\r\n|\r|\n)
hexdig 		([0-9a-f])
octdig 		([0-7])

%x string escape

%%


"---" 	showToken("STARTSTRUCT");
"..." 	showToken("ENDSTRUCT");
"[" 	showToken("LLIST");
"]"	    showToken("RLIST");
"{" 	showToken("LDICT");
"}"	    showToken("RDICT");
":" 	showToken("KEY");
"?"	    showToken("COMPLEXKEY");
"-"	    showToken("ITEM");
","	    showToken("COMMA");
"!!"{letter}+			showToken("TYPE");
"#"[^\r\n]*{newline}	showToken("COMMENT");
true			showToken("TRUE");
false			showToken("FALSE");
("+"|"-")?{digit}+|0x{hexdig}+|0o{octdig}+	showToken("INTEGER");
(("+"|"-")?{digit}*"."{digit}*)|(("+"|"-")?{digit}*"."{digit}*e("+"|"-"){digit}+)|".inf"|".NaN" 	showToken("REAL");
"'"[^"'"]*"'"	showToken("STRING");
{letter}+{alphaNum}* 	showToken("VAL");
"&"{letter}+	showToken("DECLERATION");
"*"{letter}+	showToken("DEREFERENCE");
\" BEGIN(string);
<string>\\ BEGIN(escape);
<escape>\"|a|b|e|f|n|r|t|v|0|x{hexdig}{hexdig} BEGIN(string);
<escape>. printf("Error undefined escape sequence %c\n",yytext[yyleng-1]);exit(0);
<string>\" showToken("STRING");BEGIN(0);
<string><<EOF>> printf("Error unclosed string\n");exit(0);
<<EOF>> showToken("EOF"); exit(0);
{newline}|{whitespace}	;
.	printf("Error %s\n", yytext); exit(0);
%%


int oct2int(char* oct, int len){
	int i=len-1 , temp, num = 0, factor = 1;
	for(; i>1 ; i--){
		temp = oct[i] - 48;
		temp *= factor;
		num += temp;
		factor *= 8;
	}
	return num;
}

int hex2int(char* oct, int len){

	int temp, num = 0, factor = 1, i=len-1;
	for( ; i>1 ; i--){
	//check if dig or letter
		if(( 'a' <= oct[i] ) && ( oct[i] <= 'f' ))
			temp = oct[i] - 87;
		else
			temp = oct[i] - 48;
		temp *= factor;
		num += temp;
		factor *= 16;
	}
	return num;
}


void showToken(char* str){
	
	if( strcmp(str ,"COMMENT") == 0 ){
		if(yytext[yyleng - 1] == '\n')
				yytext[yyleng - 1] = '\0';
	}
	

	if( strcmp(str ,"INTEGER") == 0 ){
		if(yytext[0] == '+')
				yytext += 1;
				
		if(yytext[0] == '0' && yytext[1] == 'x'){//hex2int
			printf("%d %s %d\n", yylineno, str, hex2int(yytext,yyleng));
			return;
		}
		
		if(yytext[0] == '0' && yytext[1] == 'o'){//oct2int
			printf("%d %s %d\n", yylineno, str, oct2int(yytext,yyleng));
			return;
		}
		
		int offset=0, i=0;
		while(yytext[i++] == '0')
			offset++;
			
		yytext += offset;
	}
        if( strcmp(str ,"STRING") == 0 ){
		
                if(yytext[0] == '\''){   //string ' stype
                    yytext[yyleng - 1] = '\0';
                    yytext++;
                }
				
                if(yytext[0] == '"'){   //string " stype
					printf("%d %s ", yylineno, str);
                    yytext++;
                    int i=0;
                    while(i!=yyleng-1){
                        if(yytext[i]=='\\' && i!=0){
                            i++;
                           switch (yytext[i]){
                                case '\\':  printf("\\"); break;
                                case '\"':  printf("\"");  break;
                                case 'a':  printf("\a"); break;
                                case 'b':  printf("\b");  break;
                                case 'e':  printf("\e"); break;
                                case 'f':  printf("\f");break;
                                case 'n':  printf("\n");break;
                                case 'r':  printf("\r");break;
                                case 't':  printf("\t");break;
                                case 'v':  printf("\v");break;
                                case '0':  printf("\0");break;
                                case 'x':  printf("%d",hex2int(yytext+i+1,2));i+=3; continue;
                           }
                        }else if((yytext[i]=='\r' && yytext[i+1]=='\n') || yytext[i]=='\n' || yytext[i]=='\r'){
                                printf(" ");
                            }
                        else{
                            printf("%c",yytext[i]);
                        }
						i++;
                    }
                    printf("\n");
                    return;
            }
    }            
	printf("%d %s %s\n", yylineno, str, yytext);
}

